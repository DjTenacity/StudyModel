总体来说设计模式分为三大类：
创建型模式，共五种：工厂方法模式、抽象工厂模式、单例模式、建造者模式、原型模式。
结构型模式，共七种：适配器模式、装饰器模式、代理模式、外观模式、桥接模式、组合模式、享元模式。
行为型模式，共十一种：策略模式、模板方法模式、观察者模式、迭代子模式、责任链模式、命令模式、备忘录模式、状态模式、访问者模式、中介者模式、解释器模式。


1 享元设计模式:
        定义:使共享对象可有效地支持大量的细粒度的对象,核心就是   对象复用
        使用:Message,LayoutInflater,EventBus...

        Message的obtain(),recycleUnchecked方法.

        创建View要通过反射(反射那个有两个参数的构造函数),首先创建构造函数(复用),然后通过构造函数实例化View,
            LayoutInflater通过反射创建View对象,例如都是ImageView,就会复用ImageView的构造函数.



2 命令设计模式 :
        讲一个请求封装成一个对象,从而让用户使用不同的请求,把客户端参数化,队请求排队或者记录日志,以及支持可撤销的工作


3 组合设计模式  :
        将对象组合成树形结构以表示 "部分 - 整体" 层次,使得用户对单个对象和组合对象的使用具有一致性



1. 状态设计模式：
           1.1 定义：当一个对象的内在状态改变时允许改变其行为，这个对象看起来又像是改变了其类。
                            在一般的开发中某些功能会受状态的影响，某些状态下某些功能是不可用，比如订单，发货->已付款，再比如 玩游戏 -> 开机状态
                            发货->已付款（讲解）一般写法


2. 桥接设计模式：
           2.1 定义：讲抽象部分与实现部分分离，使他们都可以独立的进行变化
                            充分利用我们的接口，六大原则依赖倒置，MVP 有用到




3. 中介设计模式（和事佬，协调）：
          3.1 定义：通俗一点就是，多者之间不可以直接改变，需要通过一个中介来做处理。



4. 访问者设计模式：（ButterKnife , Dagger）
         封装一些作用于某种数据结构中的各元素的操作，可以不改变这个数据结构的前提下定义作用于这些元素的新的操作。



         比如封装了一个类，但是我可以通过另外一个来对其进行修改，封装的这个类他的属性应该是不受保护。比如ButterKnife



5. 备忘录设计模式：
         5.1 在不破坏封闭的前提下，捕获一个对象的内部状态，并在该对象之外保存这个对象，这样，以后就可以讲该对象恢复到原来的状态。
               命令模式也是可以做到这个撤销和状态恢复的，但是更加强调的是命令。
