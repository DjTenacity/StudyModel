模板方法模式
定义
定义一个操作中的算法框架，而将一些步骤延迟到子类中，使得子类不改变算法的结构即可重复定义算法的某些特点步骤

必须要有继承,父类一般都是流程和通用部分的封装,子类一般都是具体的功能

角色
AbstractClass抽象类，定义算法结构，还可以提供通用实现
ConcreteClass具体实现类  选择性的重定义算法中某些特定步骤

解决的问题
一些方法通用，却在每一个子类都重新写了这一方法。

优缺点
优点： 1、封装不变部分，扩展可变部分。 2、提取公共代码，便于维护。 3、行为由父类控制，子类实现。
缺点：每一个不同的实现都需要一个子类来实现，导致类的个数增加，使得系统更加庞大。

使用场景
有多个子类共有的方法，且逻辑相同
重要的、复杂的方法，可以考虑作为模板方法。
注意事项
为防止恶意操作，一般模板方法都加上 final 关键词


+++++++++++++++++++++++++++++++++++++++++++++++++++
(1)activity的生命周期使用了 模板设计模式
    首先都是继承了Activity,而且所有要自己定义的activity(LoginActivity)的声明州区的流程都是一样的
    ,每个activity可以升值不同的界面,可以实现自己的具体的交互逻辑

(2)AsyncTask



(3)View
    View的绘制流程  ViewRootImpl
                    -->drawBackground(canvas);    //绘制背景
                    -->if(!dirtyOpaque)onDraw(canvas);      //绘制自己
                    -->dispatchDraw(canvas);       //绘制子孩子


+++++++++++++++++++++++++++++++++++++++++++++++++++++++

BaseActivity  模板模式用来控制父类的流程, 插件化开发hook启动流程

okhttp的Dispatcher(线程池)

线程的执行时间:
T = T1(线程的创建时间) + T2(run方法的执行时间) + T3(线程的销毁时间)
解决线程反复的创建和销毁,做到线程可以复用