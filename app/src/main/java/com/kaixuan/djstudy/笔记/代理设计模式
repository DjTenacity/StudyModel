代理模式:

为其他对象提供一种代理,以控制这个对象的访问,分为静态代理和动态代理.
(比如一个类已经被final--->okhttp的MultipartBody)

simple1 静态代理:        要添加功能时会很麻烦
                 目标接口
                 代理对象
                 被代理对象


simple2 动态代理:     Java提供的     BankInvocationHandler 继承InvocationHandler

 IBank iBank=
                //返回的 是IBank 的一个实例对象,这个对象是由Java给我们创建的,调用的是jni
                (IBank) Proxy.newProxyInstance(
                IBank.class.getClassLoader(),   //classloader  类的加载器
                new Class<?>[]{IBank.class},    //目标接口,必须接口
                new BankInvocationHandler(man)     //InvocationHandler(关键)
                );

        //当调用这个方法的时候,会来到BankInvocationHandler的invoke方法
        iBank.applyBank();

//每次调用生成的API实例的时候,都会调用 InvocationHandler 的invoke方法
//retrofit 就是通过这个方法 把api实例对象里面的方法转化为一个个网络请求的
// retrofit builder的时候会检验自身的okhttpClient,为空的话会创建一个
++++++++++++++++++++++++++++++++++++++++++++++++++++

retrofit就是基于OkHttp基础上来封装的
Retrofit的create要传入  接口.class   的原理就是动态代理

1)如果要实现Retrofit一样的代码:
    1.解析方法的所有注解,比如  @POST  @GET这些
    2.解析参数的所有注解,比如  FieldMap Part 等等
    3.封装成Call(Okhttp)对象
    4.返回的Call对象
